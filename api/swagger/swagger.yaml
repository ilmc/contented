swagger: "2.0"
info:
  version: "0.1.0"
  title: contented
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths 
basePath: /

tags:
  - name: Hello
    description: World Example
  - name: Content
    description: Content Mediator
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /hello:
    # binds a127 app logic to a route
    x-swagger-router-controller: hello_world
    get:
      tags: 
        - Hello
      description: Returns 'Hello' to the caller
      # used as the method name of the controller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /content/{path}:
    x-swagger-router-controller: content
    get: 
      tags:
        - Content
      operationId: getContent
      parameters:
        - name: path
          in: path
          required: true
          description: The path of the node including the content id 
          type: string
      responses:
        "200":
          description: Success
          schema:
            properties:
              contentNode:
                type: object
  /content:
    # binds a127 app logic to a route
    x-swagger-router-controller: content
    get:
      tags:
        - Content
      description: Returns the requested node
      # used as the method name of the controller
      operationId: retrieve
      parameters:
        - name: package
          in: query
          description: Tha id of the package
          required: true
          type: string
        - name: path
          in: query
          description: The path to the child
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/contentSchema"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - Content
      operationId: create
      description: "Put me a json content package"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/content"
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/HelloWorldResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"         
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  childContentSchema:
    required:
      - id
    properties:
      id:
        type: string
        default: child1
      name:
        type: string
        default: "This is my first Child"
      children:
        type: array
        items:
          $ref: "#/definitions/contentSchema"
  content:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        default: mypackage
      children:
        type: array
        items:
          $ref: '#/definitions/parent'
  parent:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        default: myparent
      children:
        type: array
        items:
          $ref: '#/definitions/child'
  child:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        default: mychild
  contentSchema:
    type: object
    properties:
      items:
        $ref: "#/definitions/child"